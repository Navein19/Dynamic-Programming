
class Solution(object):
    def rob(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        def robRecursive(node):
            if not node:
                return 0

            grandchildren = (
                robRecursive(node.left.left) + 
                robRecursive(node.left.right) if node.left else 0
            ) + (
                robRecursive(node.right.left) + 
                robRecursive(node.right.right) if node.right else 0
            )

            return max(
                node.val + grandchildren,
                robRecursive(node.left) + robRecursive(node.right))

        def robMemoization(node):
            if not node:
                return 0
            elif node in memoize:
                return memoize[node]
            
            grandchildren = (
                robMemoization(node.left.left) + 
                robMemoization(node.left.right) if node.left else 0
            ) + (
                robMemoization(node.right.left) + 
                robMemoization(node.right.right) if node.right else 0
            )

            memoize[node] = max(
                node.val + grandchildren,
                robMemoization(node.left) + robMemoization(node.right))
            return memoize[node]
        
        # Times out
        # return robRecursive(root)
        
        memoize = dict()
        return robMemoization(root)
